sources:
    osm:
        type: TopoJSONTiles
        url:  http://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-HqUVidw

cameras:
    perspective:
        type: perspective
        # focal_length: 1
        focal_length: [[16, 2], [17, 2.5], [18, 3], [19, 4], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels
    isometric:
        type: isometric
        axis: [0,1]
 
lights:
    key:
        type: directional
        direction: [-.2, 1, -1]
        diffuse: 1
        ambient: .6


styles:
        # Halftone shaders adapted from: http://webstaff.itn.liu.se/~stegu/webglshadertutorial/shadertutorial.html
    halftone:
        base: polygons
        shaders:
            uniforms:
                dot_frequency: 100.4748637184972
                dot_scale: 2
            blocks:
                global: |
                    // Antialiasing
                    float aastep(float threshold, const float freq, float value) {
                        const float scale = 2.;
                        const float y_rot = 0.;
                        float afwidth = freq * (1.0/200.0) / scale / cos(y_rot);
                        return smoothstep(threshold-afwidth, threshold+afwidth, value);
                    }

                filter: |
                    // Distance to nearest point in a grid of
                    // (frequency x frequency) points over the unit square
                    // Scale dot size for a subset of zoom
                    const float max_scale_zoom = 19.;
                    const float min_scale_zoom = 17.;
                    const float scale_zoom_factor = .25;
                    float zoom_frequency = dot_frequency / u_device_pixel_ratio;
                    zoom_frequency *= 1. + ((max_scale_zoom - clamp(u_map_position.z, min_scale_zoom, max_scale_zoom)) * scale_zoom_factor);

                    float meter_pixels = u_meters_per_pixel / u_device_pixel_ratio;

                    // Sample based on screenspace
                    const float pixel_scale = 695.; // arbitrary pixel_scale based on playing w/values
                    vec2 st = gl_FragCoord.xy / pixel_scale;

                    // But peg to map center so dots on ground plane stay in place as we move
                    // (there's what looks like some floating point precision crawl, but it's not too bad)
                    const float dot_wrap = 1000.;
                    st += mod(u_map_position.xy / meter_pixels, dot_wrap) / pixel_scale;

                    // Rotate dot & find nearest dot distance
                    vec2 st2 = mat2(0.707, -0.707, 0.707, 0.707) * st;
                    vec2 nearest = dot_scale * fract(zoom_frequency * st2) - 1.0;
                    float dist = length(nearest);

                    // Modulate the size of the dots
                    float radius = clamp(sqrt(1.0 - color.g), 0.001, 1.); // use green channel, clamp to avoid giant dot

                    // Color mix
                    const vec3 white = vec3(1.0, 1.0, 1.0);
                    const vec3 black = vec3(0.0, 0.0, 0.0);
                    // color = mix(black + (color * float(halftone_colored)), white, aastep(radius, zoom_frequency, dist));
                    color.rgb = mix(black, white, aastep(radius, zoom_frequency, dist));

layers:
    earth:
        data:
            source: osm
            layer: earth
        draw:
            polygons:
                order: 0
                color: [0.175, 0.175, 0.175]

    landuse:
        data:
            source: osm
            layer: landuse
        draw:
            polygons:
                order: 1
                interactive: true
                color: [0.5, 0.875, 0.5]
        pitch:
            filter:
                kind: ['pitch', 'garden', 'playground']
            draw:
                polygons:
                    color: [0.3, 0.675, 0.3]
                    order: .1

    water:
        data:
            source: osm
            layer: water
        draw:
            polygons:
                # style: water
                order: 2
                interactive: true
                color: [0.5, 0.5, 0.875]
            outline:
                style: lines
                color: [0.6, 0.6, 0.975]
                width: |
                    function () {
                        return (
                            $zoom >= 16 &&
                            (feature.kind != 'ocean' && feature.kind != 'riverbank') &&
                            (2.5 * Math.log($zoom))
                        );
                    }

    roads:
        data:
            source: osm
            layer: roads
        draw:
            lines:
                order: function () { return 3.5 + Math.min(Math.max(feature.sort_key * .000025, -1), 1) / 2; }
                interactive: function () { return ($zoom >= 18); }
            outline:
                style: lines
                color: [0.7, 0.7, 0.7]
                width: 1
        highway:
            filter: { kind: highway }
            draw:
                lines:
                    color: [1.0, 1.0, 1.0]
                    width: 9
            tunnel:
                filter: { is_tunnel: yes }
                draw:
                    lines:
                        color: '#333'
                        width: 6
                    outline:
                        style: lines
                        color: white
                        width: 8
        major_road:
            filter: { kind: major_road }
            draw:
                lines:
                    color: [0.5, 0.5, 0.5]
                    width: 5
        minor_road:
            filter: { kind: minor_road }
            draw:
                lines:
                    color: [0.65, 0.65, 0.65]
                    width: 4              
        path:
            filter:
               kind: path
            draw:
                lines:
                    color: [0.8, 0.8, 0.8]
                    width: 3
        rail:
            filter:
                kind: rail
                not: { is_tunnel: yes }
            draw:
                lines:
                    color: [0.5, 0.0, 0.0]
                    width: 3
                outline:
                    style: lines
                    width: 4

    buildings:
        data:
            source: osm
            layer: buildings
        draw:
            polygons:
                order: 4
                interactive: true
                color: [.6, .6, .6]
                extrude: function () { return (($zoom >= 15 && feature.height > 20) || $zoom >= 16) }
        namedBuildings:
            filter: { name: true }
            draw:
                polygons:
                    color: [.6, .2, .2]
            namedKindBuildings:
                filter: { kind: true }
                draw:
                    polygons:
                        color: [.6, .2, .6]
        kindBuildings:
            filter: { name: false, kind: true }
            draw:
                polygons:
                    color: [.2, .2, .6]
